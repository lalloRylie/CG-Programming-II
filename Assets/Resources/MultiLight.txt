void RenderMultipleLightsShader() {

	GLuint programID = _ShaderLoader.SetShader("multiplelights");

	GLint matAmbientLoc =  glGetUniformLocation(programID, "material.ambient");
	GLint matDiffuseLoc =  glGetUniformLocation(programID, "material.diffuse");
	GLint matSpecularLoc = glGetUniformLocation(programID, "material.specular");
	GLint matShineLoc =    glGetUniformLocation(programID, "material.shininess");

	glUniform3f(matAmbientLoc, 1.0f, 0.5f, 0.31f);
	glUniform3f(matDiffuseLoc, 1.0f, 0.5f, 0.31f);
	glUniform3f(matSpecularLoc, 0.5f, 0.5f, 0.5f);
	glUniform1f(matShineLoc, 32.0f);

    // Directional light
    glUniform3f(glGetUniformLocation(programID, "dirLight.direction"), -0.2f, -1.0f, -0.3f);
    glUniform3f(glGetUniformLocation(programID, "dirLight.ambient"), 0.05f, 0.05f, 0.05f);
    glUniform3f(glGetUniformLocation(programID, "dirLight.diffuse"), 0.4f, 0.4f, 0.4f);
    glUniform3f(glGetUniformLocation(programID, "dirLight.specular"), 0.5f, 0.5f, 0.5f);


	glm::vec3 pointLightPositions[] = {
		glm::vec3( 0.7f,  0.2f,  2.0f),
		glm::vec3( 2.3f, -3.3f, -4.0f),
		glm::vec3(-4.0f,  2.0f, -12.0f),
		glm::vec3( 0.0f,  0.0f, -3.0f)
	}; 

	glm::vec3 pointLightColors[] = {
		 glm::vec3(0.2f, 0.2f, 0.6f),
		glm::vec3(0.3f, 0.3f, 0.7f),
		glm::vec3(0.0f, 0.0f, 0.3f),
		glm::vec3(0.4f, 0.4f, 0.4f)
	}; 

	for (GLuint i = 0; i < 4; i++)
	{
		string number = to_string(i);
		// Point Lights
		glUniform3f(glGetUniformLocation(programID, ("pointLights[" + number + "].position").c_str()), pointLightPositions[i].x, pointLightPositions[i].y, pointLightPositions[i].z);
		glUniform3f(glGetUniformLocation(programID, ("pointLights[" + number + "].ambient").c_str()), pointLightColors[i].r * 0.1f, pointLightColors[i].g * 0.1f, pointLightColors[i].b * 0.1f);
		glUniform3f(glGetUniformLocation(programID, ("pointLights[" + number + "].diffuse").c_str()), pointLightColors[i].r, pointLightColors[i].g, pointLightColors[i].b);
		glUniform3f(glGetUniformLocation(programID, ("pointLights[" + number + "].specular").c_str()), 1.0f, 1.0f, 1.0f);
		glUniform1f(glGetUniformLocation(programID, ("pointLights[" + number + "].constant").c_str()), 1.0f);
		glUniform1f(glGetUniformLocation(programID, ("pointLights[" + number + "].linear").c_str()), 0.09f);
		glUniform1f(glGetUniformLocation(programID, ("pointLights[" + number + "].quadratic").c_str()), 0.032f);
	}

}