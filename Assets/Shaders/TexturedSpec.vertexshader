#version 330 core
 
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
 
// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 normals;
out float intensity;
out vec3 lightDirection;
 
// Values that stay constant for the whole mesh.
uniform mat4 M_matrix;
uniform mat4 V_matrix;
uniform mat4 P_matrix;
 
void main(){ 
    vec3 lightDir = normalize(vec3(0.0f, 0.0f, 1.0f));
	lightDirection = lightDir;
	mat4 normalMatrix = transpose(inverse(M_matrix));

    // UV of the vertex. No special space for this one.
    UV = vertexUV;
	normals = normalize(normalMatrix * vec4(vertexNormal, 0.0f)).xyz;
	intensity = dot(lightDir, normals);

	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  (P_matrix * V_matrix * M_matrix) * vec4(vertexPosition_modelspace,1.0f);
}